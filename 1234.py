
import os
os.environ['FLAX_LAZY_RNG'] = 'no'
os.environ['XLA_PYTHON_CLIENT_PREALLOCATE'] = 'false'

import torch
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
from transformers import GPT2Tokenizer, GPT2LMHeadModel
import diffusers
import transformers
import huggingface_hub
import nltk
import threading
import time
from tkinter import ttk
    
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π
print(">>> diffusers version:", diffusers.__version__)
print(">>> diffusers path:", diffusers.__file__)
print(">>> transformers version:", transformers.__version__)
print(">>> huggingface_hub version:", huggingface_hub.__version__)

# –ó–∞–≥—Ä—É–∑–∫–∞ NLTK —Ç–æ–∫–µ–Ω–æ–≤
nltk.download('punkt')

from translatepy import Translator

# –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
if not torch.cuda.is_available():
    print("‚ö†Ô∏è CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CPU, —á—Ç–æ –≥–æ—Ä–∞–∑–¥–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ.")
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

translator = Translator()

def translate_to_english(prompt: str) -> str:
    try:
        translation = translator.translate(prompt, "english")
        print(f"[DEBUG] –ü–µ—Ä–µ–≤–æ–¥: {translation.result}")
        return translation.result
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return prompt  # fallback


# GPT-2 –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
gpt2_tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
gpt2_model = GPT2LMHeadModel.from_pretrained("gpt2").to(device)
gpt2_model.eval()

# Stable Diffusion
from diffusers import StableDiffusionPipeline

print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ Stable Diffusion...")
pipe = StableDiffusionPipeline.from_pretrained(
    "CompVis/stable-diffusion-v1-4",
    torch_dtype=torch.float16 if device.type == "cuda" else torch.float32,
    low_cpu_mem_usage=False
).to(device)

# –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
def evaluate_complexity(prompt):
    inputs = gpt2_tokenizer.encode(prompt, return_tensors="pt").to(device)
    with torch.no_grad():
        outputs = gpt2_model(inputs, labels=inputs)
        return outputs.loss.item()

def generate_image(prompt):
    translated_prompt = translate_to_english(prompt)
    print(f"[DEBUG] –ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {translated_prompt}")

    complexity = evaluate_complexity(translated_prompt)
    print(f"[DEBUG] –°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity:.2f}")

    image = pipe(translated_prompt, guidance_scale=7.5, num_inference_steps=50).images[0]

    os.makedirs("output", exist_ok=True)
    image.save("output/generated_image.png")
    return image

# Tkinter GUI
class ImageGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Stable Diffusion Generator")
        self.root.geometry("800x600")

        self.label = tk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        self.label.pack(pady=10)

        self.entry = tk.Entry(root, width=70)
        self.entry.pack(pady=10)

        self.generate_button = tk.Button(root, text="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", command=self.generate)
        self.generate_button.pack(pady=20)

        self.image_label = tk.Label(root)
        self.image_label.pack(pady=10)

        self.progress = ttk.Progressbar(root, orient="horizontal", length=400, mode="indeterminate")
        self.progress.pack(pady=10)

        self.status_label = tk.Label(root, text="")
        self.status_label.pack(pady=5)

    def generate(self):
        prompt = self.entry.get().strip()
        if not prompt:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
            return
        threading.Thread(target=self._run_generation, args=(prompt,)).start()

    def _run_generation(self, prompt):
        try:
            self.progress["mode"] = "indeterminate"
            self.progress.start(10)
            self.status_label.config(text="‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

            img = generate_image(prompt)

            self.progress.stop()
            self.display_image(img)
            self.status_label.config(text="‚úÖ –ì–æ—Ç–æ–≤–æ!")
            self.progress["value"] = 100

        except Exception as e:
            import traceback
            traceback.print_exc()
            self.progress.stop()
            self.status_label.config(text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            messagebox.showerror("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", str(e))

    def display_image(self, img):
        img = img.resize((512, 512))
        photo = ImageTk.PhotoImage(img)
        self.image_label.configure(image=photo)
        self.image_label.image = photo

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    root = tk.Tk()
    app = ImageGeneratorApp(root)
    root.mainloop()
